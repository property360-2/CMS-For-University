from django.db import models
import uuid

# --------------------------
# Users Table
# --------------------------
class User(models.Model):
    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)
    name = models.CharField(max_length=255)
    email = models.EmailField(unique=True)
    password = models.CharField(max_length=255)  # hashed password
    role = models.CharField(max_length=50)       # admin, editor, etc.
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)

    def __str__(self):
        return self.name


# --------------------------
# Templates Table
# --------------------------
class Template(models.Model):
    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)
    name = models.CharField(max_length=100)
    description = models.TextField(blank=True, null=True)
    structure = models.JSONField()  # layout info
    theme = models.CharField(max_length=100)
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)

    def __str__(self):
        return self.name


# --------------------------
# Pages Table
# --------------------------
class Page(models.Model):
    STATUS_CHOICES = [
        ('draft', 'Draft'),
        ('published', 'Published'),
        ('archived', 'Archived')
    ]

    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)
    user = models.ForeignKey(User, on_delete=models.CASCADE, related_name="pages")
    template = models.ForeignKey(Template, on_delete=models.SET_NULL, null=True, blank=True)
    title = models.CharField(max_length=255)
    slug = models.SlugField(max_length=255, unique=True)
    content_json = models.JSONField()
    status = models.CharField(max_length=20, choices=STATUS_CHOICES, default='draft')
    seo_meta = models.JSONField(blank=True, null=True)  # title, description, keywords
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)

    def __str__(self):
        return self.title


# --------------------------
# Elements Table (optional)
# --------------------------
class Element(models.Model):
    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)
    page = models.ForeignKey(Page, on_delete=models.CASCADE, related_name="elements")
    name = models.CharField(max_length=100)
    type = models.CharField(max_length=50)  # text, image, button, etc.
    properties = models.JSONField()          # size, color, text, links
    order = models.IntegerField(default=0)
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)

    def __str__(self):
        return self.name


# --------------------------
# AI_Logs Table (optional)
# --------------------------
class AI_Log(models.Model):
    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)
    user = models.ForeignKey(User, on_delete=models.CASCADE, related_name="ai_logs")
    prompt = models.TextField()
    output_json = models.JSONField()
    model_name = models.CharField(max_length=50)  # e.g., GPT-4
    created_at = models.DateTimeField(auto_now_add=True)

    def __str__(self):
        return f"AI Log {self.id} by {self.user.name}"
______________________________________________________
from django.db import models
import uuid
from django.contrib.auth.models import User

# --------------------------
# Templates Table
# --------------------------
class Template(models.Model):
    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)
    name = models.CharField(max_length=100)
    description = models.TextField(blank=True, null=True)
    structure = models.JSONField()
    theme = models.CharField(max_length=100)
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)

    def __str__(self):
        return self.name


# --------------------------
# Pages Table
# --------------------------
class Page(models.Model):
    STATUS_CHOICES = [
        ('draft', 'Draft'),
        ('published', 'Published'),
        ('archived', 'Archived')
    ]

    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)
    user = models.ForeignKey(User, on_delete=models.CASCADE, related_name="pages")
    template = models.ForeignKey(Template, on_delete=models.SET_NULL, null=True, blank=True)
    title = models.CharField(max_length=255)
    slug = models.SlugField(max_length=255, unique=True)
    content_json = models.JSONField(blank=True, null=True)
    status = models.CharField(max_length=20, choices=STATUS_CHOICES, default='draft')
    seo_meta = models.JSONField(blank=True, null=True)
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)

    def __str__(self):
        return self.title


# --------------------------
# Elements Table
# --------------------------
class Element(models.Model):
    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)
    page = models.ForeignKey(Page, on_delete=models.CASCADE, related_name="elements")
    name = models.CharField(max_length=100)
    type = models.CharField(max_length=50)
    properties = models.JSONField()
    order = models.IntegerField(default=0)
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)

    def __str__(self):
        return self.name


# --------------------------
# AI_Logs Table
# --------------------------
class AI_Log(models.Model):
    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)
    user = models.ForeignKey(User, on_delete=models.CASCADE, related_name="ai_logs")
    page = models.ForeignKey(Page, on_delete=models.CASCADE, related_name="ai_logs")
    prompt = models.TextField()
    output_json = models.JSONField()
    model_name = models.CharField(max_length=50)
    created_at = models.DateTimeField(auto_now_add=True)

    def __str__(self):
        return f"AI Log {self.id} by {self.user.username}"


________________________________________________________________________________________________+++++++++++++++++++++++++++++++++++
from rest_framework import serializers
from django.contrib.auth.models import User
from .models import Page, Template, Element, AI_Log

# -----------------------------
# Register Serializer
# -----------------------------
class RegisterSerializer(serializers.ModelSerializer):
    password = serializers.CharField(write_only=True)

    class Meta:
        model = User
        fields = ["username", "email", "password"]

    def create(self, validated_data):
        user = User.objects.create_user(
            username=validated_data["username"],
            email=validated_data.get("email", ""),
            password=validated_data["password"]
        )
        return user

# -----------------------------
# User Serializer (read-only)
# -----------------------------
class UserSerializer(serializers.ModelSerializer):
    class Meta:
        model = User
        fields = ["id", "username", "email"]

# -----------------------------
# Page Serializer
# -----------------------------
from rest_framework import serializers
from django.contrib.auth.models import User
from .models import Page, Template, Element, AI_Log

# -----------------------------
# Page Serializer
# -----------------------------
from rest_framework import serializers
from django.contrib.auth.models import User
from .models import Page, Template, Element, AI_Log
from django.utils.text import slugify

# -----------------------------
# Page Serializer
# -----------------------------
class PageSerializer(serializers.ModelSerializer):
    # Foreign keys
    user = serializers.PrimaryKeyRelatedField(queryset=User.objects.all())
    template = serializers.PrimaryKeyRelatedField(queryset=Template.objects.all())
    
    # Optional: auto-generate slug if not provided
    slug = serializers.CharField(required=False)

    class Meta:
        model = Page
        fields = "__all__"

    def validate_status(self, value):
        # Ensure status is capitalized correctly to match model choices
        if value.lower() not in ['draft', 'published', 'archived']:
            raise serializers.ValidationError('Status must be Draft, Published, or Archived.')
        return value.capitalize()

    def create(self, validated_data):
        # Auto-generate slug if missing
        if not validated_data.get('slug') and validated_data.get('title'):
            validated_data['slug'] = slugify(validated_data['title'])
        return super().create(validated_data)

    def update(self, instance, validated_data):
        # Ensure slug stays consistent if title changes
        if 'title' in validated_data and not validated_data.get('slug'):
            validated_data['slug'] = slugify(validated_data['title'])
        return super().update(instance, validated_data)

# -----------------------------
# Template Serializer
# -----------------------------
class TemplateSerializer(serializers.ModelSerializer):
    class Meta:
        model = Template
        fields = "__all__"

# -----------------------------
# Element Serializer
# -----------------------------
class ElementSerializer(serializers.ModelSerializer):
    class Meta:
        model = Element
        fields = "__all__"

# -----------------------------
# AI Log Serializer
# -----------------------------
class AILogSerializer(serializers.ModelSerializer):
    class Meta:
        model = AI_Log
        fields = "__all__"
______________________________________________________
from rest_framework import serializers
from django.contrib.auth.models import User
from .models import Page, Template, Element, AI_Log
from django.utils.text import slugify

# --------------------------
# Register Serializer
# --------------------------
class RegisterSerializer(serializers.ModelSerializer):
    password = serializers.CharField(write_only=True)

    class Meta:
        model = User
        fields = ["username", "email", "password"]

    def create(self, validated_data):
        return User.objects.create_user(
            username=validated_data["username"],
            email=validated_data.get("email", ""),
            password=validated_data["password"]
        )


# --------------------------
# User Serializer
# --------------------------
class UserSerializer(serializers.ModelSerializer):
    class Meta:
        model = User
        fields = ["id", "username", "email"]


# --------------------------
# Page Serializer
# --------------------------
class PageSerializer(serializers.ModelSerializer):
    user = serializers.PrimaryKeyRelatedField(queryset=User.objects.all())
    template = serializers.PrimaryKeyRelatedField(queryset=Template.objects.all(), required=False, allow_null=True)
    slug = serializers.CharField(required=False)

    class Meta:
        model = Page
        fields = "__all__"

    def create(self, validated_data):
        if not validated_data.get('slug') and validated_data.get('title'):
            validated_data['slug'] = slugify(validated_data['title'])
        return super().create(validated_data)


# --------------------------
# Template Serializer
# --------------------------
class TemplateSerializer(serializers.ModelSerializer):
    class Meta:
        model = Template
        fields = "__all__"


# --------------------------
# Element Serializer
# --------------------------
class ElementSerializer(serializers.ModelSerializer):
    class Meta:
        model = Element
        fields = "__all__"


# --------------------------
# AI Log Serializer
# --------------------------
class AILogSerializer(serializers.ModelSerializer):
    class Meta:
        model = AI_Log
        fields = "__all__"

++++++++++++++++++++++++++++++++++++++++++++++++++++
from rest_framework import viewsets, generics, status
from rest_framework.decorators import action
from rest_framework.response import Response
from django.contrib.auth.models import User
from .models import Page, Template, Element, AI_Log
from .serializers import (
    PageSerializer,
    TemplateSerializer,
    ElementSerializer,
    AILogSerializer,
    UserSerializer,
    RegisterSerializer
)

# -----------------------------
# Registration API
# -----------------------------
class RegisterView(generics.CreateAPIView):
    serializer_class = RegisterSerializer

    def post(self, request, *args, **kwargs):
        serializer = self.get_serializer(data=request.data)
        if serializer.is_valid():
            user = serializer.save()
            return Response(
                {"message": "User created successfully", "user_id": user.id},
                status=status.HTTP_201_CREATED
            )
        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)

# -----------------------------
# Users (read-only)
# -----------------------------
class UserViewSet(viewsets.ReadOnlyModelViewSet):
    queryset = User.objects.all()
    serializer_class = UserSerializer

# -----------------------------
# Pages CRUD + AI Content
# -----------------------------
class PageViewSet(viewsets.ModelViewSet):
    queryset = Page.objects.all()
    serializer_class = PageSerializer

    # AI content generation endpoint
    @action(detail=True, methods=["post"])
    def generate_ai_content(self, request, pk=None):
        page = self.get_object()
        prompt = request.data.get("prompt", "")

        # Mock AI output (replace with actual AI integration later)
        ai_output = f"Generated content for: {prompt}"

        # Save AI log
        AI_Log.objects.create(
            page=page,
            prompt=prompt,
            output=ai_output,
            model_name="mock-model"
        )

        return Response({
            "message": "AI content generated",
            "output": ai_output
        })

# -----------------------------
# Templates CRUD
# -----------------------------
class TemplateViewSet(viewsets.ModelViewSet):
    queryset = Template.objects.all()
    serializer_class = TemplateSerializer

# -----------------------------
# Elements CRUD
# -----------------------------
class ElementViewSet(viewsets.ModelViewSet):
    queryset = Element.objects.all()
    serializer_class = ElementSerializer

# -----------------------------
# AI Logs CRUD
# -----------------------------
class AILogViewSet(viewsets.ModelViewSet):
    queryset = AI_Log.objects.all()
    serializer_class = AILogSerializer


______________________________________________________
from rest_framework import viewsets, generics, status
from rest_framework.decorators import action
from rest_framework.response import Response
from django.contrib.auth.models import User
from .models import Page, Template, Element, AI_Log
from .serializers import (
    PageSerializer,
    TemplateSerializer,
    ElementSerializer,
    AILogSerializer,
    UserSerializer,
    RegisterSerializer
)

# --------------------------
# Registration
# --------------------------
class RegisterView(generics.CreateAPIView):
    serializer_class = RegisterSerializer


# --------------------------
# Users (read-only)
# --------------------------
class UserViewSet(viewsets.ReadOnlyModelViewSet):
    queryset = User.objects.all()
    serializer_class = UserSerializer


# --------------------------
# Pages CRUD + AI Content
# --------------------------
class PageViewSet(viewsets.ModelViewSet):
    queryset = Page.objects.all()
    serializer_class = PageSerializer

    @action(detail=True, methods=["post"])
    def generate_ai_content(self, request, pk=None):
        page = self.get_object()
        prompt = request.data.get("prompt", "")
        ai_output = f"Generated content for: {prompt}"

        AI_Log.objects.create(
            user=request.user,
            page=page,
            prompt=prompt,
            output_json={"content": ai_output},
            model_name="mock-model"
        )

        return Response({"message": "AI content generated", "output": ai_output})


# --------------------------
# Templates CRUD
# --------------------------
class TemplateViewSet(viewsets.ModelViewSet):
    queryset = Template.objects.all()
    serializer_class = TemplateSerializer


# --------------------------
# Elements CRUD
# --------------------------
class ElementViewSet(viewsets.ModelViewSet):
    queryset = Element.objects.all()
    serializer_class = ElementSerializer


# --------------------------
# AI Logs CRUD
# --------------------------
class AILogViewSet(viewsets.ModelViewSet):
    queryset = AI_Log.objects.all()
    serializer_class = AILogSerializer
